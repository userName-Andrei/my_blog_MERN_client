{"version":3,"file":"static/js/983.68f1652c.chunk.js","mappings":"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","sources":["hooks/useImagePreviewer.js","webpack://my_blog_mern_client/./src/pages/AddPost/AddPost.module.scss?33c1","pages/AddPost/index.js"],"sourcesContent":["import {useState} from 'react';\r\n\r\nconst useImagePreviewer = (ref) => {\r\n    const [preview, setPreview] = useState({});\r\n    const [previewURL, setPreviewURL] = useState('');\r\n    const reader = new FileReader();\r\n    \r\n    const onChangePreview = (e) => {\r\n        setPreview(e.target.files[0])\r\n\r\n        reader.readAsDataURL(e.target.files[0])\r\n\r\n        reader.onloadend = () => {\r\n            setPreviewURL(reader.result)\r\n        }\r\n    }\r\n\r\n    const onDeletePreview = () => {\r\n        setPreview({})\r\n        setPreviewURL('')\r\n        ref.current.value = ''\r\n    }\r\n\r\n    return ({onChangePreview, onDeletePreview, preview, previewURL, setPreviewURL})\r\n}\r\n\r\nexport default useImagePreviewer;","// extracted by mini-css-extract-plugin\nexport default {\"preview\":\"AddPost_preview__ZIZwx\",\"editor\":\"AddPost_editor__GItmA\"};","import {useState,\r\n     useRef,\r\n     useCallback,\r\n     useMemo,\r\n     useEffect\r\n} from 'react';\r\nimport {useLocation, useParams, useNavigate} from 'react-router-dom';\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport {useForm, Controller} from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport SimpleMDE from \"react-simplemde-editor\";\r\n\r\nimport { Box, Button, Container, Stack, TextField, Typography } from '@mui/material';\r\nimport PhotoCamera from '@mui/icons-material/PhotoCamera';\r\n\r\nimport classes from './AddPost.module.scss';\r\nimport \"easymde/dist/easymde.min.css\";\r\nimport { clearPosts, createPost, fetchPostByPostId, updatePost } from '../../store/slices/postSlice';\r\nimport useImagePreviewer from '../../hooks/useImagePreviewer';\r\n\r\nconst AddPost = () => {\r\n    const dispatch = useDispatch();\r\n    const userData = useSelector(state => state.auth.user);\r\n    const status = useSelector(state => ({name: state.posts.posts.status, message: state.posts.posts.errorMessage}));\r\n    const navigate = useNavigate();\r\n    const inputFileRef = useRef();\r\n    const {onChangePreview, onDeletePreview, setPreviewURL, preview, previewURL} = useImagePreviewer(inputFileRef);\r\n    const location = useLocation().pathname.indexOf('add-post') !== -1 ? 'add-post' : 'edit';\r\n    const postId = useParams().id;\r\n\r\n    const schema = yup.object({\r\n        title: yup.string().trim().required('Поле не может быть пустым'),\r\n        text: yup.string().min(10, 'Минимум 10 символов').trim().required('Обязательное поле')\r\n    }).required();\r\n    \r\n    const {reset, setValue, getValues, handleSubmit, control, formState: {errors}} = useForm({\r\n        resolver: yupResolver(schema),\r\n        defaultValues: {\r\n            title: '',\r\n            text: '',\r\n            tags: []\r\n        },\r\n        mode: 'onChange'\r\n    });\r\n\r\n    const optionsMDE = useMemo(() => ({\r\n        spellChecker: false,\r\n        maxHeight: '300px',\r\n        placeholder: 'Введите текст',\r\n        status: false,\r\n        autosave: {\r\n            enable: true,\r\n            delay: 1000\r\n        }\r\n    }), []);\r\n\r\n    useEffect(() => {\r\n        if (!userData) {\r\n            navigate('/')\r\n            return\r\n        }\r\n\r\n        dispatch(clearPosts())\r\n\r\n        if (location === 'edit') {\r\n            dispatch(fetchPostByPostId(postId))\r\n                .then(({payload: {text, tags, title, previewUrl, author}}) => {\r\n                    setPreviewURL(previewUrl)\r\n                    setValue('title', title )\r\n                    setValue('text', text)\r\n                    setValue('tags', tags)\r\n\r\n                    if (userData._id !== author._id) {\r\n                        console.log(`userData._id - ${userData._id}`, `post.author._id - ${author._id}`)\r\n                        navigate('/')\r\n                    }\r\n                })\r\n                \r\n            return\r\n        }\r\n\r\n        \r\n    }, [])\r\n\r\n    const onChangeMDE = useCallback((value) => {\r\n        setValue('text', value)\r\n    }, [])\r\n\r\n    const onSubmit = (data) => {\r\n        const formData = new FormData();\r\n        \r\n        for (let key in data) {\r\n            formData.append(`${key}`, data[key])\r\n        }\r\n\r\n        formData.append('preview', preview)\r\n        \r\n        if (location === 'add-post') {\r\n            dispatch(createPost(formData))\r\n                .then(data => {\r\n                    onDeletePreview()\r\n                    setValue('tags', [])\r\n                    reset()\r\n                    navigate(`/posts/${data.payload._id}`)\r\n                })\r\n            \r\n            return\r\n        }\r\n\r\n        dispatch(updatePost({postId, data: formData}))\r\n            .then(data => {\r\n                onDeletePreview()\r\n                setValue('tags', [])\r\n                reset()\r\n                navigate(`/posts/${data.payload._id}`)\r\n            })\r\n    }\r\n    \r\n    return (\r\n        <Container \r\n            maxWidth='sm' \r\n            sx={{\r\n                mt: 15,\r\n                mb: 4\r\n            }}\r\n        >\r\n            {status.name === 'error' && \r\n                <Typography \r\n                    variant='h4' \r\n                    color='error' \r\n                    textAlign='center'\r\n                    gutterBottom\r\n                >\r\n                    {status.message || 'Произошла ошибка! Попробуйте обновить страницу.'}\r\n                </Typography>\r\n            }\r\n            {status.name !== 'error' && \r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Stack \r\n                        spacing={2}\r\n                    >\r\n                        <Stack \r\n                            direction='row' \r\n                            spacing={2}\r\n                        >\r\n                            <Box\r\n                                sx={{\r\n                                    display: 'flex',\r\n                                    flex: '1 0 50%'\r\n                                }}\r\n                            >\r\n                                <Button \r\n                                    variant=\"contained\" \r\n                                    component=\"label\" \r\n                                    endIcon={<PhotoCamera/>}\r\n                                    color={previewURL ? 'error' : 'secondary'}\r\n                                    onClick={() => previewURL ? onDeletePreview() : inputFileRef.current.click()}\r\n                                    sx={{\r\n                                        alignSelf: 'flex-start',\r\n                                    }}\r\n                                >\r\n                                    {previewURL ? 'Удалить превью' : 'Загрузить превью'}\r\n                                </Button>\r\n                                <input \r\n                                    name='preview'\r\n                                    ref={inputFileRef}\r\n                                    onChange={onChangePreview}\r\n                                    type=\"file\" \r\n                                    accept=\"image/jpeg, image/jpg,image/png\" \r\n                                    hidden\r\n                                    multiple \r\n                                />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    flex: '1 0 50%'\r\n                                }}\r\n                            >\r\n                                {previewURL && <img src={previewURL} className={classes.preview} alt='preview' />}\r\n                            </Box>\r\n                        </Stack>\r\n                        <Controller \r\n                            control={control}\r\n                            name='title'\r\n                            render={({field: {onChange, value}}) => (\r\n                                <TextField \r\n                                    variant=\"standard\"\r\n                                    label='Введите заголовок статьи'\r\n                                    color='secondary'\r\n                                    value={value}\r\n                                    onChange={onChange}\r\n                                    maxRows={3}\r\n                                    error={errors.title}\r\n                                    helperText={errors.title?.message}\r\n                                    multiline\r\n                                    autoFocus\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Controller \r\n                            control={control}\r\n                            name='tags'\r\n                            render={({field: {onChange, value}}) => (\r\n                                <TextField \r\n                                    variant=\"standard\"\r\n                                    name='tags'\r\n                                    label='Введите теги к статье'\r\n                                    color='secondary'\r\n                                    value={value}\r\n                                    onChange={onChange}\r\n                                    error={errors.title}\r\n                                    helperText={errors.title ? `${errors.title?.message}` : 'через запятую'}\r\n                                    multiline\r\n                                />\r\n                            )}\r\n                        />\r\n                        <SimpleMDE className={classes.editor} value={getValues('text')} options={optionsMDE} onChange={onChangeMDE} />\r\n                        {errors.text && <Typography variant='caption' color='error'>{errors.text?.message}</Typography>}\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color='secondary'\r\n                            type='submit'\r\n                        >\r\n                            {location === 'add-post' ? 'Сохранить' : 'Измененить'}\r\n                        </Button>\r\n                    </Stack>\r\n                </form>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddPost;"],"names":["ref","useState","preview","setPreview","previewURL","setPreviewURL","reader","FileReader","onChangePreview","e","target","files","readAsDataURL","onloadend","result","onDeletePreview","current","value","dispatch","useDispatch","userData","useSelector","state","auth","user","status","name","posts","message","errorMessage","navigate","useNavigate","inputFileRef","useRef","useImagePreviewer","location","useLocation","pathname","indexOf","postId","useParams","id","schema","yup","title","trim","required","text","min","useForm","resolver","yupResolver","defaultValues","tags","mode","reset","setValue","getValues","handleSubmit","control","errors","formState","optionsMDE","useMemo","spellChecker","maxHeight","placeholder","autosave","enable","delay","useEffect","clearPosts","fetchPostByPostId","then","payload","previewUrl","author","_id","console","log","onChangeMDE","useCallback","Container","maxWidth","sx","mt","mb","Typography","variant","color","textAlign","gutterBottom","onSubmit","data","formData","FormData","key","append","updatePost","createPost","Stack","spacing","direction","Box","display","flex","Button","component","endIcon","PhotoCamera","onClick","click","alignSelf","onChange","type","accept","hidden","multiple","src","className","classes","alt","render","field","TextField","label","maxRows","error","helperText","multiline","autoFocus","options"],"sourceRoot":""}