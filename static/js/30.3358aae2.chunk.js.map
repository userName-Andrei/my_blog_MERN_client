{"version":3,"file":"static/js/30.3358aae2.chunk.js","mappings":"4QAIMA,EAAkB,WACpB,OACI,+BACI,UAACC,EAAA,GAAD,CAAUC,WAAW,aAArB,WACI,SAACC,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAUC,QAAQ,WAAWC,MAAO,GAAIC,OAAQ,QAEpD,SAACC,EAAA,EAAD,CACIC,SACI,SAACL,EAAA,EAAD,CAAUE,MAAM,MAAMC,OAAQ,KAElCG,WACI,iCACI,SAACN,EAAA,EAAD,CAAUE,MAAM,MAAMC,OAAQ,GAAII,MAAO,CAAEC,aAAc,MACzD,SAACR,EAAA,EAAD,CAAUE,MAAM,OAAOC,OAAQ,MAC/B,SAACH,EAAA,EAAD,CAAUE,MAAM,OAAOC,OAAQ,MAC/B,SAACH,EAAA,EAAD,CAAUE,MAAM,MAAMC,OAAQ,cAQzD,EAeD,EAboB,SAAC,GAAqC,IAApCM,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,KAEhC,OAFqD,EAAfC,WAI9B,SAAChB,EAAD,KAKJ,SAACiB,EAAA,EAAD,CAAUC,KAAMJ,EAAQK,SAAUJ,EAAlC,SAAyCF,GAEhD,E,UCpCKO,EAAe,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUL,EAAe,EAAfA,UAE7B,OAAIK,EAASC,SAEL,iCACI,SAACC,EAAA,EAAD,CAAYlB,QAAQ,KAAKmB,cAAY,EAArC,kFACA,SAACD,EAAA,EAAD,CAAYlB,QAAQ,QAAQoB,GAAI,EAAGC,GAAI,EAAvC,SAA4CL,EAASC,cAM7D,iCACI,SAACC,EAAA,EAAD,CAAYlB,QAAQ,KAAKmB,cAAY,EAArC,kFACA,SAACG,EAAA,EAAD,WACMX,GAAS,OAAOY,MAAM,IAAMP,GAAUQ,KAAI,SAACC,EAASC,EAAGC,GAAb,OACxChB,GACI,SAAC,EAAD,CAAqBA,WAAS,GAAZe,IAElB,4BACI,SAAC,EAAD,CACIlB,KAAMiB,EAAQjB,KACdC,OAAQgB,EAAQhB,OAChBC,MAAMkB,EAAAA,EAAAA,GAAUH,EAAQI,aAE3BF,EAAID,EAAE,KAAM,SAACI,EAAA,EAAD,CAAS9B,QAAQ,QAAQ+B,UAAU,SAN1CL,EAJ0B,QAiB3D,EAED,GAAeM,EAAAA,EAAAA,MAAKjB,E,uHC9BpB,EATmB,WAAuB,IAAtBP,EAAqB,uDAAd,GAAIyB,EAAU,uCACrC,OAAIzB,EAAK0B,OAASD,GACdzB,EAAOA,EAAK2B,MAAM,EAAGF,GAAOG,MAAM,MACtBD,MAAM,EAAG3B,EAAK0B,OAAS,GAAGG,KAAK,KAAO,MAG/C7B,CACV,E,sECND,EAAuB,mBAAvB,EAAwD,0BAAxD,EAA6F,uB,SCuC7F,EAnCqB,WACjB,OACI,UAAC8B,EAAA,EAAD,CACIC,UAAWC,EACXxC,QAAQ,WAFZ,WAII,SAACyC,EAAA,EAAD,CACIC,QACI,SAAC3C,EAAA,EAAD,CACIC,QAAQ,WACRC,MAAO,GACPC,OAAQ,KAGhByC,OACM,SAAC5C,EAAA,EAAD,CACEG,OAAQ,GACRD,MAAM,MACNK,MAAO,CAAEC,aAAc,KAG7BqC,WACI,SAAC7C,EAAA,EAAD,CAAUG,OAAQ,GAAID,MAAM,WAGtC,SAACF,EAAA,EAAD,CAAUE,MAAM,OAAOC,OAAQ,IAAKF,QAAQ,iBAC5C,UAAC6C,EAAA,EAAD,YACI,SAAC9C,EAAA,EAAD,CAAUG,OAAQ,GAAII,MAAO,CAAEC,aAAc,MAC7C,SAACR,EAAA,EAAD,CAAUG,OAAQ,GAAII,MAAO,CAAEC,aAAc,MAC7C,SAACR,EAAA,EAAD,CAAUG,OAAQ,GAAID,MAAM,aAI3C,E,mGCmID,EA7Ia,SAAC,GAaP,IAZH6C,EAYE,EAZFA,GACAjC,EAWE,EAXFA,KACAkC,EAUE,EAVFA,MACAjC,EASE,EATFA,SACA6B,EAQE,EARFA,MACAnC,EAOE,EAPFA,KACAwC,EAME,EANFA,KACAC,EAKE,EALFA,MACAjC,EAIE,EAJFA,SACAL,EAGE,EAHFA,UACAuC,EAEE,EAFFA,WACAC,EACE,EADFA,WAEMC,GAAQC,EAAAA,EAAAA,KACRC,GAAWC,EAAAA,EAAAA,MAEXC,GAAYC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAWlD,EAAM,IAAvB,GAA6B,CAACA,IAElDmD,EAAU,yCAAG,WAAOC,GAAP,+FAELC,EAAAA,EAAAA,OAAA,iBAAuBD,IAFlB,OAIXN,GAASQ,EAAAA,EAAAA,IAAWF,IAJT,+CAMXG,QAAQC,KAAK,2IAAb,MANW,wDAAH,sDAUhB,OAAIrD,GACO,SAAC,EAAD,KAIH,UAAC2B,EAAA,EAAD,CACItC,QAAQ,WACRuC,UAAYY,EAA4B,KAAfX,EACzByB,GAAId,GAAc,CAACe,OAAQ,QAH/B,UAKKhB,GACG,UAACiB,EAAA,EAAD,CAAK5B,UAAWC,EAAhB,WACI,SAAC4B,EAAA,EAAD,CAAYC,MAAM,UAAlB,UACI,SAAC,KAAD,CAAMC,GAAE,iBAAYxB,EAAZ,SAAR,UACI,SAACyB,EAAA,EAAD,SAGR,SAACH,EAAA,EAAD,CACIC,MAAM,YACNG,QAAS,kBAAMb,EAAWb,EAAjB,EAFb,UAII,SAAC2B,EAAA,EAAD,SAGR,MACJ,SAAC7D,EAAA,EAAD,CACIC,KAAMA,EACNC,SAAUA,KAEd,UAAC4D,EAAA,EAAD,CACIC,UAAU,MACVV,GAAI,CACAW,SAAU,WACV1E,OAAQiD,EAAa,OAAS,QAC9BtD,WAAY,YALpB,WAQI,SAACqB,EAAA,EAAD,CACIlB,QAAQ,KACRqE,MAAOjB,EAAMyB,QAAQC,OAAOC,MAC5Bd,GAAI,CACAW,SAAU,WACVI,OAAQ,EACR5D,GAAI,EACJC,GAAI,GAPZ,SAUK8B,EAAaR,GAAQ,SAAC,KAAD,CAAM2B,GAAE,iBAAYxB,GAApB,SAA2BH,OAErD,SAACsC,EAAA,EAAD,CACIlC,MAAOA,EACPhB,UAAU,MACVkC,GAAI,CACAW,SAAU,WACVM,IAAK,EACLC,KAAM,EACNlF,MAAO,OACPC,OAAQ,WAGhB,SAACiE,EAAA,EAAD,CAAKF,GAAI,CACLW,SAAU,WACVM,IAAK,EACLC,KAAM,EACNlF,MAAO,OACPC,OAAQ,OACRkF,gBAAiB,yBAIzB,UAACvC,EAAA,EAAD,YACI,SAAC3B,EAAA,EAAD,CAAYG,GAAI,EAAhB,SACK8B,GAAa,SAAC,IAAD,CAAekC,SAAU7E,KAAW,SAAC,KAAD,CAAM8D,GAAE,iBAAYxB,GAApB,UAA0B,SAAC,IAAD,CAAeuC,SAAU7B,SAEzG,SAACkB,EAAA,EAAD,CAAOC,UAAU,MAAMW,QAAS,EAAhC,SACKtC,EAAKxB,KAAI,SAAC+D,EAAK7D,GAAN,OACN,SAACR,EAAA,EAAD,CACIlB,QAAQ,WACRqB,GAAI,EAEJgD,MAAM,YAJV,UAMI,UAAC,KAAD,CAAMC,GAAE,sBAAiBiB,GAAzB,cACMA,MAJD7D,EAJH,OAaV,UAACgD,EAAA,EAAD,CACIC,UAAU,MADd,WAGI,UAACD,EAAA,EAAD,CACIC,UAAU,MACV9E,WAAW,SACX2F,GAAI,EAHR,WAKI,SAACC,EAAA,EAAD,CAAgBxB,GAAI,CAACuB,GAAI,GAAInB,MAAM,eACnC,SAACnD,EAAA,EAAD,CAAYlB,QAAQ,WAAWqE,MAAM,YAArC,SAAkDpB,QAEtD,UAACyB,EAAA,EAAD,CACIC,UAAU,MACV9E,WAAW,SAFf,WAII,SAAC6F,EAAA,EAAD,CAAazB,GAAI,CAACuB,GAAI,GAAInB,MAAM,eAChC,SAACnD,EAAA,EAAD,CAAYlB,QAAQ,WAAWqE,MAAM,YAArC,SAAkDrD,GAAY,eAM7F,C,iHCjID,IAnCiB,SAAC2E,GACd,IAAO9E,EAA4B8E,EAA5B9E,KAAMC,EAAsB6E,EAAtB7E,SAAUuE,EAAYM,EAAZN,SACvB,OACI,SAAC,IAAD,CAAMpB,GAAI,CAAEhE,MAAO,OAAQ2F,QAAS,oBAAsBC,gBAAc,EAAxE,UACI,UAAC,KAAD,CAAUhG,WAAW,aAArB,WACI,SAAC,IAAD,WACI,SAAC,IAAD,CAAQiG,IAAKjF,EAAKkF,KAAMC,IAAKnF,EAAKoF,eAEtC,SAAC,IAAD,CACA7F,QAASS,EAAKkF,KACd1F,WACI,gCACKS,EACAuE,IACG,SAAC,IAAD,CACIa,GAAI,EACJC,SAAS,SAFb,UAII,SAAC,IAAD,CACInG,QAAQ,QACRqE,MAAM,eACNtC,UAAU,IAHd,SAKKsD,eAUpC,C,sOCkCD,EA3DmB,SAAC,GAAY,IAAD,MAAVxE,EAAU,EAAVA,KACXyC,GAAWC,EAAAA,EAAAA,MACX6C,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,WAAWJ,MAA3B,IAC1BxC,GAAS6C,EAAAA,EAAAA,MAAY3D,GACrB4D,EAASC,EAAAA,GAAW,CACtBnG,KAAMmG,EAAAA,KAAaC,OAAOC,SAASC,SAAS,wIAC7CA,WAEH,GAA6DC,EAAAA,EAAAA,IAAQ,CACjEC,UAAUC,EAAAA,EAAAA,GAAYP,GACtBQ,KAAM,aAFHC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,aAA0BC,EAAlD,EAAsCC,UAAYD,OAUlD,OACI,UAAC5C,EAAA,EAAD,CACIC,UAAU,MACV1E,MAAM,OACNuH,GAAI,EAHR,WAKI,SAACC,EAAA,EAAD,CACIzB,IAAKnF,EAAKoF,WAAa,KACvBhC,GAAI,CAACuB,GAAI,MAEb,SAACrB,EAAA,EAAD,CAAKuD,SAAU,EAAf,UACI,kBAAMC,SAAUN,GAhBX,SAAC5F,GACd6B,GAASsE,EAAAA,EAAAA,IAAc,CAAChE,OAAAA,EAAQnC,QAAAA,EAAShB,OAAQI,KACjDuG,GACH,IAaW,WACI,SAACS,EAAA,GAAD,kBACQV,EAAS,SADjB,IAEIW,MAAM,sHACN9H,QAAQ,WACR+H,QAAS,EACTC,QAAS,EACTC,KAAK,OACL5D,MAAO6D,QAAO,UAACZ,EAAO9G,YAAR,aAAC,EAAaS,SAAW,QAAU,YACjDkH,MAAOD,QAAO,UAACZ,EAAO9G,YAAR,aAAC,EAAaS,SAC5BmH,WAAU,UAAEd,EAAO9G,YAAT,aAAE,EAAaS,QACzBoH,WAAS,EACTC,WAAS,EACTrE,GAAI,CAAC5C,GAAI,OAEb,SAACkH,EAAA,EAAD,CACIvI,QAAQ,YACRqE,MAAM,YACN4D,KAAK,SACLO,SAAS,SAACC,EAAA,EAAD,IACTC,SAAqB,YAAXtC,EALd,SAOgB,YAAXA,EAAuB,sDAAgB,kEAM/D,E,wCCQD,EAjEiB,WACb,IAAM9C,GAAWC,EAAAA,EAAAA,MACXoF,GAAOtC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMA,MAAMqC,MAAM,EAA5B,IACxBC,GAAaxC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,MAAK,CAACP,KAAMO,EAAMC,MAAMA,MAAMH,OAAQnF,QAASqF,EAAMC,MAAMA,MAAMuC,aAAjE,IAC9B9H,GAAWqF,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMvF,QAAhB,IAC5B4C,GAAS6C,EAAAA,EAAAA,MAAY3D,GACrBiG,GAAS1C,EAAAA,EAAAA,IAAY2C,EAAAA,IACrBC,GAAW5C,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAM4C,KAAKrI,IAAf,KAElCsI,EAAAA,EAAAA,YAAU,WACN7F,GAAS8F,EAAAA,EAAAA,OACT9F,GAAS+F,EAAAA,EAAAA,IAAkBzF,IAC3BN,GAASgG,EAAAA,EAAAA,IAAsB1F,GAClC,GAAE,IAwCH,OACI,UAACc,EAAA,EAAD,CAAOwB,GAAI,GAAI7E,GAAI,EAAnB,UAvCe,SAACsH,EAAME,GACtB,MAAwB,UAApBA,EAAW9C,MAEP,SAAC7E,EAAA,EAAD,CACIlB,QAAQ,KACRqE,MAAM,QACNkF,UAAU,SACVpI,cAAY,EAJhB,SAMK0H,EAAW5H,SAAW,iQAKX,YAApB4H,EAAW9C,MAEP,SAACyD,EAAA,EAAD,CACI7I,UAA+B,YAApBkI,EAAW9C,KACtB5C,YAAU,KAMlB,SAACqG,EAAA,EAAD,CACI3I,KAAM8H,EAAKlI,OACXsC,MAAO4F,EAAKc,WACZ3I,UAAUc,EAAAA,EAAAA,GAAU+G,EAAK9G,WACzBc,MAAOgG,EAAKhG,MACZK,KAAM2F,EAAK3F,KACXxC,KAAMmI,EAAKnI,KACXyC,MAAO0F,EAAKe,WACZ1I,SAAU2H,EAAKgB,aACfxG,YAAU,GAGrB,CAIQyG,CAAWjB,EAAME,GACG,UAApBA,EAAW9C,OAAoB,iCAC5B,SAAChF,EAAA,EAAD,CAAcC,SAAUA,EAAS4H,MAAOjI,UAA+B,YAApBK,EAASoF,SACvC,UAApBpF,EAASoF,SAAsB,SAAClF,EAAA,EAAD,CAAYlB,QAAQ,QAAQqE,MAAM,QAAQjD,GAAI,EAAGC,GAAI,EAArD,uSAC/B0H,IAAU,SAAC,EAAD,CAAYlI,KAAMoI,SAI5C,C,qBC3DC,IAfgB,SAACvI,GACf,IAAMmJ,EAAU,SAACC,GACf,OAAOA,EAAO,GAAK,IAAMA,EAAOA,CACjC,EAEKC,EAAU,IAAIC,KAAJ,UAAYtJ,IAEtBuJ,EAAU,CACdC,KAAK,GAAD,OAAKL,EAAQE,EAAQI,YAArB,YAAoCN,EAAQE,EAAQK,eACxD1J,KAAK,GAAD,OAAKmJ,EAAQE,EAAQM,WAArB,YAAmCR,EAAQE,EAAQO,WAAa,GAAhE,YAAsEP,EAAQQ,gBAGpF,MAAM,GAAN,OAAUN,EAAQvJ,KAAlB,YAA0BuJ,EAAQC,KACnC,C,2BCXCM,EAAyBC,EAAQ,MAKrCC,EAAQ,OAAU,EAElB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAEhDG,EAAcH,EAAQ,KAEtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,0CACD,QAEJN,EAAQ,EAAUG,C","sources":["components/CommentItem.js","components/CommentBlock/index.js","utils/textSlicer.js","webpack://my_blog_mern_client/./src/components/Post/Post.module.scss?af4e","components/Post/Skeleton.js","components/Post/index.js","components/UserData.js","components/AddComment.js","pages/Post/index.js","utils/dateFixer.js","../node_modules/@mui/icons-material/Send.js"],"sourcesContent":["import { Avatar, Box, ListItem, ListItemAvatar, ListItemText, Skeleton, Typography} from '@mui/material';\r\nimport React from 'react';\r\nimport UserData from './UserData';\r\n\r\nconst SkeletonComment = () => {\r\n    return (\r\n        <>\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <Skeleton variant='circular' width={40} height={40} />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={\r\n                        <Skeleton width='40%' height={15} />\r\n                    }\r\n                    secondary={\r\n                        <>\r\n                            <Skeleton width='20%' height={10} style={{ marginBottom: 6 }}/>\r\n                            <Skeleton width='100%' height={10} />\r\n                            <Skeleton width='100%' height={10} />\r\n                            <Skeleton width='80%' height={10} />\r\n                        </>\r\n                        \r\n                    }\r\n                />\r\n            </ListItem>\r\n        </>\r\n    )\r\n}\r\n\r\nconst CommentItem = ({text, author, date, isLoading}) => {\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <SkeletonComment />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <UserData user={author} postDate={date}>{text}</UserData>\r\n    );\r\n};\r\n\r\nexport default CommentItem;","import { Divider, List, Typography } from '@mui/material';\r\nimport React, {memo} from 'react';\r\nimport CommentItem from '../CommentItem';\r\nimport dateFixer from '../../utils/dateFixer'\r\n\r\nconst CommentBlock = ({comments, isLoading}) => {\r\n\r\n    if (comments.message) {\r\n        return (\r\n            <>\r\n                <Typography variant='h5' gutterBottom >Комментарии:</Typography>\r\n                <Typography variant='body1' ml={2} mb={2} >{comments.message}</Typography>\r\n            </>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Typography variant='h5' gutterBottom>Комментарии:</Typography>\r\n            <List>\r\n                {(isLoading ? [...Array(5)] : comments).map((comment, i, arr) => (\r\n                    isLoading ? (\r\n                        <CommentItem key={i} isLoading />\r\n                    ) : (\r\n                        <div key={i}>\r\n                            <CommentItem \r\n                                text={comment.text} \r\n                                author={comment.author} \r\n                                date={dateFixer(comment.createdAt)}\r\n                            />\r\n                            {arr[i+1] && <Divider variant=\"inset\" component='li' />}\r\n                        </div>\r\n                    )\r\n                ))}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(CommentBlock);","const textSlicer = (text = '', limit) => {\r\n    if (text.length > limit) {\r\n        text = text.slice(0, limit).split(' ');\r\n        return text.slice(0, text.length - 1).join(' ') + '...';\r\n    }\r\n    \r\n    return text;\r\n}\r\n\r\nexport default textSlicer;","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Post_root__V46Gj\",\"editButtons\":\"Post_editButtons__xNNC5\",\"skeleton\":\"Post_skeleton__BhgkI\"};","import { Card, CardContent, CardHeader, Skeleton, Stack } from '@mui/material';\r\nimport React from 'react';\r\n\r\nimport classes from './Post.module.scss';\r\n\r\nconst SkeletonPost = () => {\r\n    return (\r\n        <Card \r\n            className={classes.skeleton}\r\n            variant='outlined'\r\n        >\r\n            <CardHeader\r\n                avatar={\r\n                    <Skeleton \r\n                        variant=\"circular\" \r\n                        width={40} \r\n                        height={40} \r\n                    />\r\n                }\r\n                title={\r\n                      <Skeleton\r\n                        height={10}\r\n                        width=\"80%\"\r\n                        style={{ marginBottom: 6 }}\r\n                      />\r\n                  }\r\n                  subheader={\r\n                      <Skeleton height={10} width=\"40%\" />\r\n                  }\r\n            />\r\n            <Skeleton width='100%' height={200} variant=\"rectangular\"/>\r\n            <CardContent>\r\n                <Skeleton height={10} style={{ marginBottom: 6 }} />\r\n                <Skeleton height={10} style={{ marginBottom: 6 }} />\r\n                <Skeleton height={10} width=\"80%\" />\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SkeletonPost;","import React, { useMemo } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch} from 'react-redux';\r\nimport axios from '../../utils/axios';\r\nimport textSlicer from '../../utils/textSlicer';\r\nimport { removePost } from '../../store/slices/postSlice';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nimport UserData from '../UserData';\r\nimport SkeletonPost from './Skeleton';\r\n\r\nimport { \r\n    Box, \r\n    Card, \r\n    CardContent,\r\n    CardMedia, \r\n    IconButton, \r\n    Stack, \r\n    Typography, \r\n    useTheme \r\n} from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport CommentIcon from '@mui/icons-material/Comment';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nimport classes from './Post.module.scss';\r\n\r\nconst Post = ({\r\n    id,\r\n    user, \r\n    image, \r\n    postDate, \r\n    title, \r\n    text,\r\n    tags,\r\n    views,\r\n    comments, \r\n    isLoading,\r\n    isEditable,\r\n    isFullPost\r\n}) => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const sliceText = useMemo(() => textSlicer(text, 100), [text]);\r\n\r\n    const deletePost = async (postId) => {\r\n        try {\r\n            await axios.delete(`/posts/${postId}`)\r\n\r\n            dispatch(removePost(postId))\r\n        } catch (error) {\r\n            console.warn('Не удалось удалить статью!',error)\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <SkeletonPost />\r\n    }\r\n    \r\n    return (\r\n            <Card \r\n                variant='outlined'\r\n                className={!isFullPost ? classes.root : null}\r\n                sx={isFullPost && {border: 'none'}}\r\n            >\r\n                {isEditable ? (\r\n                    <Box className={classes.editButtons}>\r\n                        <IconButton color=\"primary\">\r\n                            <Link to={`/posts/${id}/edit`}>\r\n                                <EditIcon />\r\n                            </Link>\r\n                        </IconButton>\r\n                        <IconButton \r\n                            color=\"secondary\"\r\n                            onClick={() => deletePost(id)}\r\n                        >\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                ) : null}\r\n                <UserData \r\n                    user={user}\r\n                    postDate={postDate} \r\n                />\r\n                <Stack \r\n                    direction=\"row\"\r\n                    sx={{\r\n                        position: 'relative',\r\n                        height: isFullPost ? '40vh' : '200px',\r\n                        alignItems: 'flex-end'\r\n                    }}\r\n                >\r\n                    <Typography \r\n                        variant='h4' \r\n                        color={theme.palette.common.white}\r\n                        sx={{\r\n                            position: \"relative\",\r\n                            zIndex: 5,\r\n                            ml: 2,\r\n                            mb: 1\r\n                        }}\r\n                    >\r\n                        {isFullPost ? title : <Link to={`/posts/${id}`}>{title}</Link>}\r\n                    </Typography>\r\n                    <CardMedia \r\n                        image={image}\r\n                        component='img'\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: '100%',\r\n                            height: '100%',\r\n                        }}\r\n                    />\r\n                    <Box sx={{\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        backgroundColor: 'rgba(0,0,0,0.3)'\r\n                        }} \r\n                    />\r\n                </Stack>\r\n                <CardContent>\r\n                    <Typography mb={1}>\r\n                        {isFullPost ? <ReactMarkdown children={text} /> : <Link to={`/posts/${id}`}><ReactMarkdown children={sliceText} /></Link>}\r\n                    </Typography>\r\n                    <Stack direction='row' spacing={1}>\r\n                        {tags.map((tag, i) => (\r\n                            <Typography \r\n                                variant='overline' \r\n                                mb={1} \r\n                                key={i} \r\n                                color='secondary'\r\n                            >\r\n                                <Link to={`/posts/tags/${tag}`}>\r\n                                    #{tag}\r\n                                </Link>\r\n                            </Typography>\r\n                        ))}\r\n                    </Stack>\r\n                        <Stack\r\n                            direction='row'\r\n                        >\r\n                            <Stack\r\n                                direction='row'\r\n                                alignItems='center'\r\n                                mr={2}\r\n                            >\r\n                                <VisibilityIcon sx={{mr: 1}} color='secondary' />\r\n                                <Typography variant='subtitle' color='secondary'>{views}</Typography>\r\n                            </Stack>\r\n                            <Stack\r\n                                direction='row'\r\n                                alignItems='center'\r\n                            >\r\n                                <CommentIcon sx={{mr: 1}} color='secondary' />\r\n                                <Typography variant='subtitle' color='secondary'>{comments || 0}</Typography>\r\n                            </Stack>\r\n                        </Stack>\r\n                </CardContent>\r\n            </Card>\r\n    );\r\n};\r\n\r\nexport default Post;","import { Avatar, Box, Divider, List, ListItem, ListItemAvatar, ListItemText, Typography} from '@mui/material';\r\nimport React from 'react';\r\n\r\nconst UserData = (props) => {\r\n    const {user, postDate, children} = props;\r\n    return (\r\n        <List sx={{ width: '100%', bgcolor: 'background.paper' }} disablePadding>\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <Avatar alt={user.name} src={user.avatarUrl} />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                primary={user.name}\r\n                secondary={\r\n                    <>\r\n                        {postDate}\r\n                        {children && \r\n                            <Box \r\n                                mt={1}\r\n                                overflow='hidden'\r\n                            >\r\n                                <Typography \r\n                                    variant='body2' \r\n                                    color='text.primary'\r\n                                    component='p'\r\n                                >\r\n                                    {children}\r\n                                </Typography>\r\n                            </Box>\r\n                        }\r\n                    </>\r\n                }\r\n                />\r\n            </ListItem>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default UserData;","import React from 'react';\r\nimport {useForm} from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { createComment } from '../store/slices/postSlice';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport { Avatar, Box, TextField, Stack, Button } from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n\r\nconst AddComment = ({user}) => {\r\n    const dispatch = useDispatch();\r\n    const status = useSelector(state => state.posts.newComment.status)\r\n    const postId = useParams().id;\r\n    const schema = yup.object({\r\n        text: yup.string().trim().ensure().required('Поле не может быть пустым')\r\n    }).required();\r\n\r\n    const {register, reset, handleSubmit, formState: {errors}} = useForm({\r\n        resolver: yupResolver(schema),\r\n        mode: 'onChange'\r\n    });\r\n\r\n    const onSubmit = (comment) => {\r\n        dispatch(createComment({postId, comment, author: user}))\r\n        reset();\r\n    }\r\n\r\n    return (\r\n        <Stack \r\n            direction='row' \r\n            width='100%' \r\n            pl={2}\r\n        >\r\n            <Avatar\r\n                src={user.avatarUrl || null}\r\n                sx={{mr: 2}}\r\n            />\r\n            <Box flexGrow={1}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <TextField \r\n                        {...register('text')}\r\n                        label='Написать комментарий'\r\n                        variant='outlined'\r\n                        minRows={3}\r\n                        maxRows={8}\r\n                        type='text'\r\n                        color={Boolean(errors.text?.message) ? 'error' : 'secondary'}\r\n                        error={Boolean(errors.text?.message)}\r\n                        helperText={errors.text?.message}\r\n                        multiline\r\n                        fullWidth\r\n                        sx={{mb: 2}}\r\n                    />\r\n                    <Button \r\n                        variant='contained' \r\n                        color='secondary' \r\n                        type='submit'\r\n                        endIcon={<SendIcon />}\r\n                        disabled={status === 'loading'}\r\n                    >\r\n                        {status === 'loading' ? 'Звгрузка...' : 'Отправить'}\r\n                    </Button>\r\n                </form>\r\n            </Box>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default AddComment;","import { Stack, Typography } from '@mui/material';\r\nimport {useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport AddComment from '../../components/AddComment';\r\nimport CommentBlock from '../../components/CommentBlock';\r\nimport Post from '../../components/Post';\r\nimport dateFixer from '../../utils/dateFixer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { isAuthChecker } from '../../store/slices/authSlice';\r\nimport { clearPosts, fetchCommentsByPostId, fetchPostByPostId } from '../../store/slices/postSlice';\r\n\r\nconst FullPost = () => {\r\n    const dispatch = useDispatch();\r\n    const post = useSelector(state => state.posts.posts.items[0]);\r\n    const postStatus = useSelector(state => ({name: state.posts.posts.status, message: state.posts.posts.errorMessage}));\r\n    const comments = useSelector(state => state.posts.comments);\r\n    const postId = useParams().id;\r\n    const isAuth = useSelector(isAuthChecker);\r\n    const userData = useSelector(state => state.auth.user);\r\n\r\n    useEffect(() => {\r\n        dispatch(clearPosts())\r\n        dispatch(fetchPostByPostId(postId))\r\n        dispatch(fetchCommentsByPostId(postId))\r\n    }, []);\r\n\r\n    const renderPost = (post, postStatus) => {\r\n        if (postStatus.name === 'error') {\r\n            return (\r\n                <Typography \r\n                    variant='h4' \r\n                    color='error' \r\n                    textAlign='center'\r\n                    gutterBottom\r\n                >\r\n                    {postStatus.message || 'Произошла ошибка! Попробуйте обновить страницу.'}\r\n                </Typography>\r\n            )\r\n        }\r\n\r\n        if (postStatus.name === 'loading') {\r\n            return (\r\n                <Post \r\n                    isLoading={postStatus.name === 'loading'}\r\n                    isFullPost\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Post \r\n                user={post.author} \r\n                image={post.previewUrl}\r\n                postDate={dateFixer(post.createdAt)}\r\n                title={post.title}\r\n                tags={post.tags}\r\n                text={post.text}\r\n                views={post.viewsCount}\r\n                comments={post.commentCount}\r\n                isFullPost\r\n            /> \r\n        )\r\n    }\r\n\r\n    return (\r\n        <Stack mt={10} mb={4}>\r\n            {renderPost(post, postStatus)}\r\n            {postStatus.name !== 'error' && <>\r\n                <CommentBlock comments={comments.items} isLoading={comments.status === 'loading'}/>\r\n                {comments.status === 'error' && <Typography variant='body1' color='error' ml={2} mb={2}>Произошла ошибка, попробуйте перезагрузить страницу</Typography>}\r\n                {isAuth && <AddComment user={userData}/>}\r\n            </>}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default FullPost;","const dateFixer = (date) => {\r\n    const addZero = (data) => {\r\n      return data < 10 ? '0' + data : data;\r\n    }\r\n    \r\n    const oldDate = new Date(`${date}`);\r\n\r\n    const newDate = {\r\n      time: `${addZero(oldDate.getHours())}:${addZero(oldDate.getMinutes())}`,\r\n      date: `${addZero(oldDate.getDate())}/${addZero(oldDate.getMonth() + 1)}/${oldDate.getFullYear()}`\r\n    }\r\n\r\n    return `${newDate.date} ${newDate.time}`;\r\n  }\r\n\r\n  export default dateFixer;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;"],"names":["SkeletonComment","ListItem","alignItems","ListItemAvatar","Skeleton","variant","width","height","ListItemText","primary","secondary","style","marginBottom","text","author","date","isLoading","UserData","user","postDate","CommentBlock","comments","message","Typography","gutterBottom","ml","mb","List","Array","map","comment","i","arr","dateFixer","createdAt","Divider","component","memo","limit","length","slice","split","join","Card","className","classes","CardHeader","avatar","title","subheader","CardContent","id","image","tags","views","isEditable","isFullPost","theme","useTheme","dispatch","useDispatch","sliceText","useMemo","textSlicer","deletePost","postId","axios","removePost","console","warn","sx","border","Box","IconButton","color","to","Edit","onClick","Delete","Stack","direction","position","palette","common","white","zIndex","CardMedia","top","left","backgroundColor","children","spacing","tag","mr","Visibility","Comment","props","bgcolor","disablePadding","alt","name","src","avatarUrl","mt","overflow","status","useSelector","state","posts","newComment","useParams","schema","yup","trim","ensure","required","useForm","resolver","yupResolver","mode","register","reset","handleSubmit","errors","formState","pl","Avatar","flexGrow","onSubmit","createComment","TextField","label","minRows","maxRows","type","Boolean","error","helperText","multiline","fullWidth","Button","endIcon","Send","disabled","post","items","postStatus","errorMessage","isAuth","isAuthChecker","userData","auth","useEffect","clearPosts","fetchPostByPostId","fetchCommentsByPostId","textAlign","Post","previewUrl","viewsCount","commentCount","renderPost","addZero","data","oldDate","Date","newDate","time","getHours","getMinutes","getDate","getMonth","getFullYear","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}